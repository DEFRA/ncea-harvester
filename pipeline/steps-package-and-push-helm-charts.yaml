steps:

- task: HelmDeploy@0
  displayName: Helm package
  condition: and(succeeded(), or(eq(variables['isMain'], 'true'), eq(variables['isPullRequest'], 'true'))
  inputs:
    command: package
    chartPath: $(chartPath)
    chartVersion: $(Build.BuildNumber)
    destination: $(Build.ArtifactStagingDirectory)

- task: PublishPipelineArtifact@1
  condition: and(succeeded(), or(eq(variables['isMain'], 'true'), eq(variables['isPullRequest'], 'true'))
  inputs:
    targetPath: $(Build.ArtifactStagingDirectory)/ncea-harvester-$(Build.BuildNumber).tgz
    artifactName: charts


# # - bash: |
# #     helm push '$(Build.ArtifactStagingDirectory)/ncea-harvester-$(Build.BuildNumber).tgz' oci://$(ACR.Name).azurecr.io/helm

#helm chart push

# - task: HelmDeploy@0
#   displayName: Helm save
#   condition: and(succeeded(), eq(variables.isPullRequest, false))
#   inputs:
#     connectionType: 'Kubernetes Service Connection'
#     kubernetesServiceConnection: $(AKS.ServiceConnection)
#     command: save
#     chartNameForACR: charts/$(ACR.ContainerRepository):$(Build.BuildNumber)
#     chartPathForACR:  $(chartPath) 
#     azureResourceGroupForACR: $(ACR.ResourceGroupName)
#     azureContainerRegistry: '$(ACR.Name).azurecr.io'
#   env:
#     HELM_EXPERIMENTAL_OCI: 1